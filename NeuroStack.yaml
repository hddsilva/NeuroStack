AWSTemplateFormatVersion: '2010-09-09'
Description: NeuroStack Cloudformation json - test
Parameters:
  BucketPrefix:
    Type: String
    Default: neurostack-input-
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group for instances launched in the VPC by Batch
      VpcId:
        Ref: VPC
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: 'True'
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: Subnet
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EcsInstanceRole
  LambdaBatchPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:PutLogEvents
              - logs:CreateLogGroup
              - logs:CreateLogStream
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - batch:SubmitJob
            Resource: arn:aws:batch:*:*:*
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  Ec2S3FullAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: s3fullaccesspolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: '*'
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: neurostack-launch-template
      LaunchTemplateData:
        ImageId: ami-079219f3fafd8d0e2
        UserData: TUlNRS1WZXJzaW9uOiAxLjAKQ29udGVudC1UeXBlOiBtdWx0aXBhcnQvbWl4ZWQ7IGJvdW5kYXJ5PSI9PU1ZQk9VTkRBUlk9PSIKCi0tPT1NWUJPVU5EQVJZPT0KQ29udGVudC1UeXBlOiB0ZXh0L3gtc2hlbGxzY3JpcHQ7IGNoYXJzZXQ9InVzLWFzY2lpIgoKIyEvYmluL2Jhc2gKc3VkbyBhcHQtZ2V0IGluc3RhbGwgaXB0YWJsZXMtcGVyc2lzdGVudApzdWRvIGlwdGFibGVzIC10IG5hdCAtQSBQUkVST1VUSU5HIC1wIHRjcCAtZCAxNjkuMjU0LjE3MC4yIC0tZHBvcnQgODAgLWogRE5BVCAtLXRvLWRlc3RpbmF0aW9uIDEyNy4wLjAuMTo1MTY3OQpzdWRvIGlwdGFibGVzIC10IG5hdCAtQSBPVVRQVVQgLWQgMTY5LjI1NC4xNzAuMiAtcCB0Y3AgLW0gdGNwIC0tZHBvcnQgODAgLWogUkVESVJFQ1QgLS10by1wb3J0cyA1MTY3OQoKZG9ja2VyIHB1bGwgYW1hem9uL2FtYXpvbi1lY3MtYWdlbnQ6bGF0ZXN0Cgpta2RpciAtcCAvZXRjL2VjcyAmJiBzdWRvIHRvdWNoIC9ldGMvZWNzL2Vjcy5jb25maWcKbWtkaXIgLXAgL3Zhci9sb2cvZWNzIC92YXIvbGliL2Vjcy9kYXRhCgpjYXQgPDxFT0YgPj4vZXRjL2Vjcy9lY3MuY29uZmlnCkVDU19EQVRBRElSPS9kYXRhCkVDU19FTkFCTEVfVEFTS19JQU1fUk9MRT10cnVlCkVDU19FTkFCTEVfVEFTS19JQU1fUk9MRV9ORVRXT1JLX0hPU1Q9dHJ1ZQpFQ1NfTE9HRklMRT0vbG9nL2Vjcy1hZ2VudC5sb2cKRUNTX0FWQUlMQUJMRV9MT0dHSU5HX0RSSVZFUlM9WyJqc29uLWZpbGUiLCJhd3Nsb2dzIl0KRUNTX0xPR0xFVkVMPWluZm8KRUNTX0VOQUJMRV9BV1NMT0dTX0VYRUNVVElPTlJPTEVfT1ZFUlJJREU9dHJ1ZQoKRU9GCgpjYXQgPDxFT0YgPj4vZXRjL3N5c3RlbWQvc3lzdGVtL2Vjcy1hZ2VudC5zZXJ2aWNlCgpbVW5pdF0KRGVzY3JpcHRpb249QVdTIEVDUyBBZ2VudApSZXF1aXJlcz1kb2NrZXIuc2VydmljZQpBZnRlcj1kb2NrZXIuc2VydmljZQoKW1NlcnZpY2VdClRpbWVvdXRTdGFydFNlYz0wClJlc3RhcnRTZWM9MTAKUmVzdGFydD1hbHdheXMKS2lsbE1vZGU9bm9uZQoKCkV4ZWNTdGFydFByZT0vdXNyL2Jpbi9kb2NrZXIgcHVsbCBhbWF6b24vYW1hem9uLWVjcy1hZ2VudDpsYXRlc3QKRXhlY1N0YXJ0PS91c3IvYmluL2RvY2tlciBydW4gLS1uYW1lICVuIFwKLS1yZXN0YXJ0PW9uLWZhaWx1cmU6MTAgXAotLXZvbHVtZT0vdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jayBcCi0tdm9sdW1lPS92YXIvbG9nL2VjczovbG9nIFwKLS12b2x1bWU9L3Zhci9saWIvZWNzL2RhdGE6L2RhdGEgXAotLW5ldD1ob3N0IFwKLS1lbnYtZmlsZT0vZXRjL2Vjcy9lY3MuY29uZmlnIFwKLS1lbnY9RUNTX0xPR0ZJTEU9L2xvZy9lY3MtYWdlbnQubG9nIFwKLS1lbnY9RUNTX0RBVEFESVI9L2RhdGEvIFwKLS1lbnY9RUNTX0VOQUJMRV9UQVNLX0lBTV9ST0xFPXRydWUgXAotLWVudj1FQ1NfRU5BQkxFX1RBU0tfSUFNX1JPTEVfTkVUV09SS19IT1NUPXRydWUgXAotLWVudj1FQ1NfSU1BR0VfQ0xFQU5VUF9JTlRFUlZBTD0xMG0gXAotLWVudj1FQ1NfSU1BR0VfTUlOSU1VTV9DTEVBTlVQX0FHRT0yMG0gXAotLWVudj1FQ1NfRU5HSU5FX1RBU0tfQ0xFQU5VUF9XQUlUX0RVUkFUSU9OPTFoIFwKLS1lbnY9RUNTX05VTV9JTUFHRVNfREVMRVRFX1BFUl9DWUNMRT0xMCBcCmFtYXpvbi9hbWF6b24tZWNzLWFnZW50OmxhdGVzdAoKW0luc3RhbGxdCldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0CkVPRgoKc3lzdGVtY3RsIGVuYWJsZSAtLW5vdyAtLW5vLWJsb2NrIGVjcy1hZ2VudC5zZXJ2aWNlCi0tPT1NWUJPVU5EQVJZPT0tLQo=
        EbsOptimized: true
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            VirtualName: increaseroot
            Ebs:
              Encrypted: false
              DeleteOnTermination: true
              VolumeSize: 100
              VolumeType: gp2
          - DeviceName: /dev/sdb
            VirtualName: ebs
            Ebs:
              Encrypted: false
              DeleteOnTermination: true
              VolumeSize: 40
              VolumeType: gp2     
  ScriptBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Sub: neurostack-script-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
  OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Sub: neurostack-output-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
  InputBucket:
    DependsOn: LambdaPermission
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Sub: neurostack-input-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Function:
              Fn::GetAtt:
                - LambdaFunction
                - Arn
            Event: s3:ObjectCreated:*
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - LambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Sub: arn:aws:s3:::${BucketPrefix}${AWS::AccountId}
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: neurostack-lambda
      Runtime: python3.8
      PackageType: Zip
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        ZipFile: |
                  import boto3
                  def lambda_handler(event, context):
                        client = boto3.client('batch', 'us-east-1')
                        filename = event['Records'][0]['s3']['object']['key']
                        print(filename)
                        basic_job = client.submit_job(
                            jobName='neurostack-job',
                            jobQueue='neurostack-jobqueue',
                            jobDefinition='neurostack-jobdefinition',
                            containerOverrides={
                                'environment': [
                                    {
                                        'name': 'FileName',
                                        'value': filename
                                    }
                                ]         
                            }
                        )
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: LambdaBatchPolicy
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: neurostack-spot
      Type: MANAGED
      ComputeResources:
        Type: SPOT
        AllocationStrategy: SPOT_CAPACITY_OPTIMIZED
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: 256
        LaunchTemplate:
            LaunchTemplateName: neurostack-launch-template
        InstanceTypes:
          - optimal
        Subnets:
          - Ref: Subnet
        SecurityGroupIds:
          - Ref: SecurityGroup
        InstanceRole:
          Ref: IamInstanceProfile
      ServiceRole:
        Ref: BatchServiceRole
  ComputeEnvironment2:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: neurostack-ondemand
      Type: MANAGED
      ComputeResources:
        Type: EC2
        AllocationStrategy: BEST_FIT
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: 256
        LaunchTemplate:
            LaunchTemplateName: neurostack-launch-template
        InstanceTypes:
          - optimal
        LaunchTemplate:
          LaunchTemplateName: neurostack-launch-template
        Subnets:
          - Ref: Subnet
        SecurityGroupIds:
          - Ref: SecurityGroup
        InstanceRole:
          Ref: IamInstanceProfile
      ServiceRole:
        Ref: BatchServiceRole
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: neurostack-jobqueue
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: ComputeEnvironment
  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: neurostack-jobdefinition
      Type: container
      ContainerProperties:
        Image: public.ecr.aws/v8l0a1m9/neurostack_fetchrun:latest
        JobRoleArn:
          Fn::GetAtt:
            - Ec2S3FullAccessRole
            - Arn
        Vcpus: 4
        Memory: 10000
        Command:
          - neurostack_script.sh
        Volumes:
          - Host:
              SourcePath: /
            Name: local
        MountPoints:
          - ContainerPath: /nitrc
            ReadOnly: false
            SourceVolume: local
        Environment:
          - Name: BATCH_FILE_S3_URL
            Value:
              Fn::Sub: s3://neurostack-script-${AWS::AccountId}/neurostack_script.sh
          - Name: BATCH_FILE_TYPE
            Value: script
      RetryStrategy:
        Attempts: 1
